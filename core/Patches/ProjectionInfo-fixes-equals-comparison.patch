From 5eec9b38858eb9b6dbf316a08eeaa16a7544e828 Mon Sep 17 00:00:00 2001
From: Justin Penka <jpenka@gmail.com>
Date: Wed, 22 Jul 2015 15:11:01 -0500
Subject: [PATCH] fixes ProjectionInfo equals comparison

---
 Trunk/DotSpatial.Projections/ProjectionInfo.cs | 55 +++++++++++++++++++++-----
 1 file changed, 46 insertions(+), 9 deletions(-)

diff --git a/Trunk/DotSpatial.Projections/ProjectionInfo.cs b/Trunk/DotSpatial.Projections/ProjectionInfo.cs
index 0c40651..f399886 100644
--- a/Trunk/DotSpatial.Projections/ProjectionInfo.cs
+++ b/Trunk/DotSpatial.Projections/ProjectionInfo.cs
@@ -696,9 +696,11 @@ namespace DotSpatial.Projections
         }
 
         /// <summary>
-        /// Gets a boolean that is true if the Esri WKT string created by the projections matches.
-        ///   There are multiple ways to write the same projection, but the output Esri WKT string
-        ///   should be a good indicator of whether or not they are the same.
+        /// Original version compared either the Esri WKT or Proj4 string representation of the projection to
+        /// determine if they matched. Unfortunately, discrepancies between the two representations as well
+        /// as inconsistencies between American and BIPM spelling and case differentiations returned
+        /// false on projections that were actually matches. To remedy this we now only compare actual values 
+        /// and disregard naming conventions entirely.
         /// </summary>
         /// <param name="other">
         /// The other projection to compare with.
@@ -708,12 +710,47 @@ namespace DotSpatial.Projections
         /// </returns>
         public bool Equals(ProjectionInfo other)
         {
-            if (other == null)
-            {
-                return false;
-            }
-
-            return ToEsriString().Equals(other.ToEsriString()) || ToProj4String().Equals(other.ToProj4String());
+            // likely a better way to fix this would be within the ToEsriString() function. However this
+            // probably require a lookup for all possible options, ie "metre, "meter, "foot", "ft", etc.
+            // could this information be pulled from PostGIS installation or spatialreference.org?
+            if (other == null) return false;
+            if (!GeographicInfo.Datum.Spheroid.Code.Equals(other.GeographicInfo.Datum.Spheroid.Code)) return false;
+            if (!GeographicInfo.Datum.Spheroid.EquatorialRadius.Equals(other.GeographicInfo.Datum.Spheroid.EquatorialRadius)) return false;
+            if (!GeographicInfo.Datum.Spheroid.InverseFlattening.Equals(other.GeographicInfo.Datum.Spheroid.InverseFlattening)) return false;
+            if (!GeographicInfo.Datum.Spheroid.PolarRadius.Equals(other.GeographicInfo.Datum.Spheroid.PolarRadius)) return false;
+            if (!GeographicInfo.Meridian.Code.Equals(other.GeographicInfo.Meridian.Code)) return false;
+            if (!GeographicInfo.Meridian.Longitude.Equals(other.GeographicInfo.Meridian.Longitude)) return false;
+            if (!GeographicInfo.Unit.Name.ToLower().Equals(other.GeographicInfo.Unit.Name.ToLower())) return false;
+            if (!GeographicInfo.Unit.Radians.Equals(other.GeographicInfo.Unit.Radians)) return false;
+            if (!Unit.Meters.Equals(other.Unit.Meters)) return false;
+            if (!FalseEasting.Equals(other.FalseEasting)) return false;
+            if (!FalseNorthing.Equals(other.FalseNorthing)) return false;
+            if (!IsGeocentric.Equals(other.IsGeocentric)) return false;
+            if (!IsLatLon.Equals(other.IsLatLon)) return false;
+            if (!IsSouth.Equals(other.IsSouth)) return false;
+            if (!LatitudeOfOrigin.Equals(other.LatitudeOfOrigin)) return false;
+            if (!LongitudeOfCenter.Equals(other.LongitudeOfCenter)) return false;
+            if (!NoDefs.Equals(other.NoDefs)) return false;
+            if (!Over.Equals(other.Over)) return false;
+            if (!ScaleFactor.Equals(other.ScaleFactor)) return false;
+            if (!StandardParallel1.Equals(other.StandardParallel1)) return false;
+            if (!StandardParallel2.Equals(other.StandardParallel2)) return false;
+            if (!Transform.Name.Equals(other.Transform.Name)) return false;
+            if (CentralMeridianValid() && !other.CentralMeridianValid()) return false;
+            if (!CentralMeridianValid() && other.CentralMeridianValid()) return false;
+            if (CentralMeridianValid() && other.CentralMeridianValid())
+            {
+                if (!CentralMeridian.Value.Equals(other.CentralMeridian.Value)) return false;
+            }
+            if (Zone.HasValue && !other.Zone.HasValue) return false;
+            if (!Zone.HasValue && other.Zone.HasValue) return false;
+            if (Zone.HasValue && other.Zone.HasValue)
+            {
+                if (!Zone.Value.Equals(other.Zone.Value)) return false;
+            }
+            // replace 'BIPM' spelling with 'American' spelling.
+            if (!Unit.Name.Replace("metre", "meter").ToLower().Equals(other.Unit.Name.ToLower().Replace("metre", "meter"))) return false;
+            return true;
         }
 
         /// <summary>
-- 
1.8.4.msysgit.0

